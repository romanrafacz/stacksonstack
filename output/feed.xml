<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://jbake.org</link>
    <atom:link href="http://jbake.org/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 26 Jan 2016 14:42:50 -0600</pubDate>
    <lastBuildDate>Tue, 26 Jan 2016 14:42:50 -0600</lastBuildDate>

    <item>
      <title>Pluginto Vim</title>
      <link>http://jbake.org/blog/2016/vim_plugins.html</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/vim_plugins.html</guid>
      <description>
&amp;lt;p&amp;gt;Awesome Vim plugins that will make your life easier&amp;lt;/p&amp;gt;


&amp;lt;p&amp;gt;
With so many tools out there it&amp;#39;s hard to keep track of all of them, here are a few that you should keep up your sleeve
&amp;lt;/p&amp;gt;

&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/tpope/vim-pathogen&amp;quot;&amp;gt;vim-pathogen&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;p&amp;gt;
Most of these are provided by tpope via github who is a unicorn.  Pathogen makes installing plugins a breeze.  Once you add pathogen into your your vimrc, you&amp;#39;re able to quickly add other plugins into your enviroment by dropping them in the the bundle folder in .vim.
&amp;lt;/p&amp;gt;

&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/tpope/vim-sensible.git&amp;quot;&amp;gt;vim-sensible&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;p&amp;gt;
Vim-Sensible is a good starting point to your .vimrc, especially if you&amp;#39;re new to vim.  Ultimately you&amp;#39;ll want to roll your own so you know exactly what you&amp;#39;ll get but if you ain&amp;#39;t got no time for that, start here.
&amp;lt;/p&amp;gt;


&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/christoomey/vim-tmux-navigator.git&amp;quot;&amp;gt;vim-tmux-navigator&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;p&amp;gt;
If you&amp;#39;re using multiple split screens with vim, tmux allows you to navigate a bit better. 
&amp;lt;/p&amp;gt;

&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/cwoac/nvim.git&amp;quot;&amp;gt;https://github.com/cwoac/nvim.git&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;p&amp;gt;nvim&amp;lt;/p&amp;gt;

&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ctrlpvim/ctrlp.vim.git&amp;quot;&amp;gt;ctrlp&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;i&amp;gt;ctrlp&amp;lt;/i&amp;gt;Full path fuzzy file, buffer, mru, tag, ... finder for Vim.  Makes navigating throught files and directories a breeze
.  Well documented, easy to use. &amp;lt;/p&amp;gt;

Netfiler
</description>	  
    </item>

    <item>
      <title>Top python libraries</title>
      <link>http://jbake.org/blog/2014/python.html</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/python.html</guid>
      <description>
My top 10 python libraries

Some usefull libraried that have been helpfull
</description>	  
    </item>

    <item>
      <title>Postgres starter kit</title>
      <link>http://jbake.org/blog/2014/postgres_start.html</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/postgres_start.html</guid>
      <description>

&amp;lt;p&amp;gt;Getting postgres up and running.&amp;lt;/p&amp;gt;

* http://example.org
* http://example.org[Example.org]

Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu, 
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo 
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet 
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus, 
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In 
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere 
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.
</description>	  
    </item>

    <item>
      <title>Springboot</title>
      <link>http://jbake.org/blog/2014/springboot.html</link>
      <pubDate>Sun, 2 Aug 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/springboot.html</guid>
      <description>&amp;lt;p&amp;gt;Springboot is a great tool if you&amp;#39;re looking to delelop quickly and efficiently.  It does all the heavy lifting of wiring all your beans and configuration together so you can just focus on coding&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Setup a basic project with springboot. We&amp;#39;ll work in eclipse and a maven build.  
The easiest way is the head over to &amp;lt;a href=&amp;quot;http://start.spring.io/&amp;quot;&amp;gt;http://start.spring.io&amp;lt;/a&amp;gt; .  Spring initializer will allow us to 
create a basic project that we can import into eclipse.  
Make sure to select the latest java version along with the build type, for this example we&amp;#39;ll use Maven.  
Also, select the necessary packages, in this case add the following dependencies Web , Thymeleaf, JPA, &amp;amp; Postgres&amp;lt;/p&amp;gt;

&amp;lt;!-- &amp;lt;imgÂ th:with=&amp;quot;rootpath=(${content.rootpath != null} ? ${content.rootpath} : &amp;#39;&amp;#39;)&amp;quot; th:src=&amp;quot;@{${rootpath}+&amp;#39;images/spring_initializer_img.png}&amp;quot; /&amp;gt; --&amp;gt;
&amp;lt;img =&amp;quot;/images/spring_initializer_img.png&amp;quot; /&amp;gt;

&amp;lt;p&amp;gt;Once you download, add the folder into your IDE.  You will notice a basic file structure.  We&amp;#39;re going to add a few things to get this site up and 
running.  A controller to handle the incoming requests.  A domain object for our entity(think table).  A domain access object and then of course our views.  This is where Thymeleaf comes in, I like it as a templating enigne. Lastly, we need to modify our application.properties, which is how the persistance layer gets applied.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Here is our Application context, you wont need to modify this.  Later, you can add other object such as a Servlet object.&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
package com.heroes;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SuperheroesApplication {

  public static void main(String[] args) {
      SpringApplication.run(SuperheroesApplication.class, args);
	}
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Note @SpringBootApplication, this combines 3 annotations you would use in Spring MVC - @Configuration, @ComponentScan, @EnableSpring - confirm this&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Now lets configure the Controller&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;

package com.heroes.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HomeController {

  @RequestMapping(&amp;quot;/&amp;quot;)
  public String home(){
    return &amp;quot;home&amp;quot;;
  }
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;
This will route to our landing page, let&amp;#39;s create another controller that will route to our user data.
&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
package com.heroes.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.portlet.ModelAndView;

import com.heroes.repository.UserRepository;

@Controller
public class UserController {
  
    @Autowired
    private UserRepository userRepository;

    @RequestMapping(&amp;quot;/users&amp;quot;)
    public ModelAndView getUsers(){
      return new ModelAndView(&amp;quot;users&amp;quot;, &amp;quot;users&amp;quot;, userRepository.findAll());
    }
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
package com.heroes.domain;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name=&amp;quot;user&amp;quot;)
public class User {
  
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name=&amp;quot;id&amp;quot;)
    private Integer id;
	    
    @Column(name=&amp;quot;username&amp;quot;)
    private String username;
	      
    @Column(name=&amp;quot;email&amp;quot;)
    private String email;
		    
    @Column(name=&amp;quot;password&amp;quot;)
    private String password;
			      
    //Getters and Setters here
}
				
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Once we have our domain model, we will need to add a service object that will fetch our data.  Loose coupling and modularity is the goal here.
Create a class &amp;lt;b&amp;gt;UserRepository.java&amp;lt;/b&amp;gt; in the com.heroes.repository package.
&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettypring&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
	package com.heroes.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.heroes.domain.User;

public interface UserRepository extends JpaRepository&amp;lt;User, Long&amp;gt; {

}

&amp;lt;/code&amp;gt;	
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;
Next, lets tie in our database.  Under resources, there is an application.properties file that we need to modify.  Here we can add our database details.  
Eventually, you will want to place file on your system vs hardcoding these variables but we can add it for now.  
&amp;lt;a href=&amp;quot;http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&amp;quot;&amp;gt;Here&amp;lt;/a&amp;gt; you will find common application properties you can add.
&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://192.168.100.1:5432/spring
spring.datasource.username=roman
spring.datasource.password=snickers
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Almost done, we need to add our frontend html files.  We&amp;#39;re using thymeleaf as our templating engine and we&amp;#39;ll use bootstrap
to do all of the heavy lifting on the front end.  Under resources files add a &amp;lt;b&amp;gt;home.html&amp;lt;/b&amp;gt; file(remember our home controller), also add
a &amp;lt;b&amp;gt;user.html&amp;lt;/b&amp;gt; file.
&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
	
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;You&amp;#39;ll notice I&amp;#39;ve uses webjars to reference bootstart(as well as angular and jqeury).
WebJars allow you to manage frontend assets and include them in your project as Java Archive (JAR) Maven dependencies.
This is what I have added to my maven pom.xml file.
&amp;lt;/p&amp;gt;
&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
			&amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;bootstrap&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;3.3.1&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;angularjs&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;1.3.8&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;jquery&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;1.11.1&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
</description>	  
    </item>

    <item>
      <title>Saltstack: Up and Running</title>
      <link>http://jbake.org/blog/2015/saltstack_up_and_running.html</link>
      <pubDate>Thu, 2 Apr 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/saltstack_up_and_running.html</guid>
      <description>
&amp;lt;p&amp;gt;
Th goal of this post is to have a working example of saltstack, a mighty fine configuration management tool written in python.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
We&amp;#39;re going to setup a master server and a slave(minion) which we will be able to push all our states to.  &amp;lt;i&amp;gt;State&amp;lt;/i&amp;gt; with the extention .sls is how
we are able to define what we went to exactly went want to happen to our minion.  We will define a user state that will define user profiles
across 1 server or 1000.
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
Saltstack also provides us with a really neat remote ssh execution tool which makes pushing out code to remote minions as.  I.E, you can just update 1 package
to a host of machines with one command.  We&amp;#39;ll also commit our states to a Git repo so we can continue building out our states.
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
First thing you want to do is make sure you have salt-master installed on one of your system.  This is as easy as using the package manager on your
flavor of *nix.  Windows servers are not support as salt masters at the time of this wrting.

I will be using CentOS for this writeup.  I am also using two vagrant machines to make the process easier, you can checkout devops section if you&amp;#39;re unsure.
&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
	&amp;lt;code&amp;gt;
		sudo yum install salt-master -y
	&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Once salt-maste is install, we&amp;#39;ll just quick setup some quick configurations.&amp;lt;/br&amp;gt;
	&amp;lt;li&amp;gt;Change the hostname to saltmaster&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;Navigate to /etc/salt/master&amp;lt;/li&amp;gt;
&amp;lt;/p&amp;gt;



</description>	  
    </item>

    <item>
      <title>Postgres Backup &amp;amp; Recovery</title>
      <link>http://jbake.org/blog/2014/backup_pg_server.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/backup_pg_server.html</guid>
      <description>&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.org&amp;quot; class=&amp;quot;bare&amp;quot;&amp;gt;http://example.org&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.org&amp;quot;&amp;gt;Example.org&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;</description>	  
    </item>

  </channel> 
</rss>
